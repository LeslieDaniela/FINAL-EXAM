Stone Game

RECURSIVELY: 
The pattern that the algorithm uses to solve the problem is composed of a recursive method that adds the total points of the player taking its turn to find the highest possible combination of piles. The highest combination of piles would depend on whether the first player takes the first or the last integer in the array int [ ] piles and keeps record of it adding it to a separate array called int [ ] score.

For example:

int [ ] piles = {5, 3, 4, 5}

First Player could choose either the first index 
->	piles [ i ]
or choose the last index 
->	piles [ j ]
and they would either be added to the score array on the specific index, for [ i ] it would be piles [ i ] + score [ i + 1 ] and for index position [ j ] it would be piles [ j ] + score [ j + 1 ].

A strategy to simplify finding the winner of the game and returning a Boolean (true/false) would be to create a similar algorithm that would keep track of the second player’s scores and subtract them, since the difference would either be 1 or 0 due to the player’s accumulated points being even and odd.

For example:

PLAYER ONE:
score [ i + 1 ][ j + 1] = Math.max(piles [ i ] + score [ i + 2 ][ j + 1 ], piles [ j ] + score [ i + 1 ][ j ]
//WOULD FIND MAXIMUM OF EITHER PILE CHOSEN 

PLAYER TWO:
score [ i + 1 ][ j + 1] = Math.min(-piles [ i ] + score [ i + 2 ][ j + 1 ], -piles [ j ] + score [ i + 1 ][ j ]
//WOULD FIND MINIMUM OF EITHER PILE CHOSEN 

STRUCTURE:

Array Storing Solutions
The array that serves as a storing data structure stores the variables within the program in the array int [ ] score which serves as a score keeper in link with the original array int [ ] piles. The algorithm goes through the array of integer piles and checks the highest combinations as well as the lowest combinations depending on the turn of the player, then after finding either or it will add the highest combinations to the array store.

Overall Structure

The program will contain two arrays one of them containing the integer (int [ ] piles) piles, and the other the scores of players one and two (int [ ] score), the other variable will be int n that serves as the integer form of the array piles’ length. Variable equals will check the chosen index i plus index j plus the length of the array piles and module it by 2 to check whether the combinations of piles chosen have a remainder of one. If the operations have a remainder of one the preceding operations will check the exact scores of both players to identify which one is the winner.   






